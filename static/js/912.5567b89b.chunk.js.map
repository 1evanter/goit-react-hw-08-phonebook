{"version":3,"file":"static/js/912.5567b89b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  width: 300px;\n  height: 330px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 65px 15px;\n  gap: 15px;\n  align-items: center;\n  border-radius: 4px;\n  background-image: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.1) 0%,\n    rgba(255, 255, 255, 0.4) 100%\n  );\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-weight: 500;\n`;\n\nexport const StyledField = styled(Field)`\n  margin-top: 3px;\n  padding: 6px 10px;\n\n  border: 2px solid #9db2bf;\n  border-radius: 3px;\n  outline: none;\n\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border: 2px solid #526d82;\n  }\n`;\n\nexport const Button = styled.button`\n  min-width: 192px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { StyledForm, StyledField, Label, Button } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = newContact => {\n    if (contacts.find(contact => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ id: nanoid(), ...newContact }));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={(values, actions) => {\n        handleSubmit(values);\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <Label>\n          {' '}\n          Name\n          <StyledField\n            name=\"name\"\n            type=\"text\"\n            pattern=\"^[а-яА-ЯёЁa-zA-Z\\s]+$\"\n            required\n          />\n        </Label>\n\n        <Label>\n          {' '}\n          Number\n          <StyledField\n            name=\"number\"\n            type=\"tel\"\n            pattern=\"\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid rgba(39, 55, 77, 0.7);\n`;\n","import { Item } from './ContactItem.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactItem = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return filteredContacts.map(({ name, number, id }) => {\n    return (\n      <Item key={id}>\n        {name}: {number}\n        <button onClick={() => dispatch(deleteContact(id))} type=\"button\">\n          Delete\n        </button>\n      </Item>\n    );\n  });\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  height: auto;\n`;\n","import { ContactItem } from \"components/ContactItem/ContactItem\"\nimport { List } from \"./ContactList.styled\" \n\nexport const ContactList = () => {\n    return (\n        <List >\n            <ContactItem/>\n    </List>\n    )\n\n}","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  max-width: 360px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 25px;\n  gap: 15px;\n  max-height: 65px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-weight: 500;\n  font-size: 20px;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  flex-direction: column;\n  margin-top: 8px;\n  border: 2px solid #9db2bf;\n  border-radius: 3px;\n  outline: none;\n  padding: 6px 10px;\n  font-size: 16px;\n\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border: 2px solid #526d82;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input, Form } from './Filter.styled';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  return (\n    <Form>\n      <Label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          onChange={e => dispatch(changeFilter(e.currentTarget.value))}\n          value={filter}\n          name=\"filter\"\n        />\n      </Label>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const Container = styled.div`\n  max-width: 1000px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const Title = styled.h2`\n  display: block;\n  margin: 30px auto 50px;\n  font-size: 46px;\n`;\n\nexport const Section = styled.section`\n  width: 360px;\n  height: 450px;\n  padding: 15px;\n\n  overflow: auto;\n\n  &::-webkit-scrollbar {\n    width: 4px;\n    height: 6px;\n  }\n  &::-webkit-scrollbar-track {\n    border-radius: 10px;\n    background: rgba(0, 0, 0, 0.1);\n  }\n  &::-webkit-scrollbar-thumb {\n    border-radius: 10px;\n    background: rgba(0, 0, 0, 0.2);\n  }\n  &::-webkit-scrollbar-thumb:hover {\n    background: rgba(0, 0, 0, 0.4);\n  }\n  &::-webkit-scrollbar-thumb:active {\n    background: rgba(0, 0, 0, 0.6);\n  }\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { Section, Title, Wrapper, Container } from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Wrapper>\n      <Title>Contacts</Title>\n      <Container>\n        <ContactForm />\n        <Section>\n          <Filter />\n          <ContactList />\n          {isLoading && !error && <b>Request in progress...</b>}\n        </Section>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","StyledField","Field","_templateObject3","Button","_templateObject4","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","_ref","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","number","onSubmit","values","actions","newContact","find","contact","alert","concat","addContact","_objectSpread","id","nanoid","resetForm","children","_jsxs","type","pattern","required","title","Item","ContactItem","map","onClick","deleteContact","List","ContactList","Input","Filter","onChange","e","changeFilter","currentTarget","value","Wrapper","Container","Title","Section","useEffect","fetchContacts"],"sourceRoot":""}